networks:
  # This is like the physical cable links between the routers, so the idea is that now we have a subnet link for each pair of routers
  link-1-2:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.12.0/24 # subnet reprensenting the internal link between router 1 and 2, emulated physical ethernet link
          gateway: 192.168.12.1
  
  link-1-3:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.13.0/24
          gateway: 192.168.13.1
  
  link-1-4:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.14.0/24
          gateway: 192.168.14.1
  
  link-2-5:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.25.0/24
          gateway: 192.168.25.1
  
  link-3-4:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.34.0/24
          gateway: 192.168.34.1
  
  link-4-5:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.45.0/24
          gateway: 192.168.45.1
  
  # New network links for routers 6-10
  link-4-6:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.46.0/24
          gateway: 192.168.46.1
  
  link-5-6:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.56.0/24
          gateway: 192.168.56.1
  
  link-5-7:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.57.0/24
          gateway: 192.168.57.1
  
  link-2-7:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.27.0/24
          gateway: 192.168.27.1
  
  link-6-8:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.68.0/24
          gateway: 192.168.68.1
  
  link-7-8:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.78.0/24
          gateway: 192.168.78.1
  
  link-6-9:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.69.0/24
          gateway: 192.168.69.1
  
  link-7-9:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.79.0/24
          gateway: 192.168.79.1
  
  link-8-9:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.89.0/24
          gateway: 192.168.89.1
  
  link-8-10:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.110.0/24
          gateway: 192.168.110.1
  
  link-9-10:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.120.0/24
          gateway: 192.168.120.1
  
  # Management network for SDN controller
  management:
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.0.0/24
          gateway: 10.0.0.1

services:
  # SDN controller service
  sdn_controller:
    build:
      context: ./sdn_controller
      dockerfile: Dockerfile
    container_name: sdn_controller
    networks:
      management:
        ipv4_address: 10.0.0.2
    ports:
      - "8000:8000"  # Expose the FastAPI port
    volumes:
      - ./shared:/shared  # Mount the same shared directory
      - ./docker-compose.yml:/app/docker-compose.yml  # Mount docker-compose.yml directly into container
    depends_on:
      - router1
      - router2
      - router3
      - router4
      - router5
      - router6
      - router7
      - router8
      - router9
      - router10
    environment:
      - SOURCE_ROUTER=router1
      - DESTINATION_ROUTER=router10
  
  # Router 1: connected to routers 2, 3, and 4
  router1:
    build:
      context: ./router
      dockerfile: Dockerfile
    container_name: router1
    networks:
      link-1-2:
        ipv4_address: 192.168.12.2
      link-1-3:
        ipv4_address: 192.168.13.2
      link-1-4:
        ipv4_address: 192.168.14.2
      management:
        ipv4_address: 10.0.0.10
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.ip_forward=1
    ports:
      - "8001:8000"
      - "9001:9000"  # Expose router TCP port for packet routing
    volumes:
      - ./shared:/shared
    environment:
      - ROUTER_ID=router1
      - PORT=9000
  
  # Router 2: connected to routers 1 and 5 and 7
  router2:
    build:
      context: ./router
      dockerfile: Dockerfile
    container_name: router2
    networks:
      link-1-2:
        ipv4_address: 192.168.12.3
      link-2-5:
        ipv4_address: 192.168.25.2
      link-2-7:
        ipv4_address: 192.168.27.2
      management:
        ipv4_address: 10.0.0.11
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.ip_forward=1
    ports:
      - "8002:8000"
      - "9002:9000"  # Expose router TCP port for packet routing
    volumes:
      - ./shared:/shared
    environment:
      - ROUTER_ID=router2
      - PORT=9000
  
  # Router 3: connected to routers 1 and 4
  router3:
    build:
      context: ./router
      dockerfile: Dockerfile
    container_name: router3
    networks:
      link-1-3:
        ipv4_address: 192.168.13.3
      link-3-4:
        ipv4_address: 192.168.34.2
      management:
        ipv4_address: 10.0.0.12
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.ip_forward=1
    ports:
      - "8003:8000"
      - "9003:9000"
    volumes:
      - ./shared:/shared
    environment:
      - ROUTER_ID=router3
      - PORT=9000
  
  # Router 4: connected to routers 1, 3, 5 and 6
  router4:
    build:
      context: ./router
      dockerfile: Dockerfile
    container_name: router4
    networks:
      link-1-4:
        ipv4_address: 192.168.14.3
      link-3-4:
        ipv4_address: 192.168.34.3
      link-4-5:
        ipv4_address: 192.168.45.2
      link-4-6:
        ipv4_address: 192.168.46.2
      management:
        ipv4_address: 10.0.0.13
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.ip_forward=1
    ports:
      - "8004:8000"
      - "9004:9000"
    volumes:
      - ./shared:/shared
    environment:
      - ROUTER_ID=router4
      - PORT=9000
  
  # Router 5: connected to routers 2 and 4
  router5:
    build:
      context: ./router
      dockerfile: Dockerfile
    container_name: router5
    networks:
      link-2-5:
        ipv4_address: 192.168.25.3
      link-4-5:
        ipv4_address: 192.168.45.3
      link-5-6:
        ipv4_address: 192.168.56.2
      link-5-7:
        ipv4_address: 192.168.57.2
      management:
        ipv4_address: 10.0.0.14
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.ip_forward=1
    ports:
      - "8005:8000"
      - "9005:9000"
    volumes:
      - ./shared:/shared
    environment:
      - ROUTER_ID=router5
      - PORT=9000
  
  # New router 6: connected to routers 4 and 5
  router6:
    build:
      context: ./router
      dockerfile: Dockerfile
    container_name: router6
    networks:
      link-4-6:
        ipv4_address: 192.168.46.3
      link-5-6:
        ipv4_address: 192.168.56.3
      link-6-8:
        ipv4_address: 192.168.68.2
      link-6-9:
        ipv4_address: 192.168.69.2
      management:
        ipv4_address: 10.0.0.15
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.ip_forward=1
    ports:
      - "8006:8000"
      - "9006:9000"
    volumes:
      - ./shared:/shared
    environment:
      - ROUTER_ID=router6
      - PORT=9000
  
  # New router 7: connected to routers 2 and 5
  router7:
    build:
      context: ./router
      dockerfile: Dockerfile
    container_name: router7
    networks:
      link-2-7:
        ipv4_address: 192.168.27.3
      link-5-7:
        ipv4_address: 192.168.57.3
      link-7-8:
        ipv4_address: 192.168.78.2
      link-7-9:
        ipv4_address: 192.168.79.2
      management:
        ipv4_address: 10.0.0.16
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.ip_forward=1
    ports:
      - "8007:8000"
      - "9007:9000"
    volumes:
      - ./shared:/shared
    environment:
      - ROUTER_ID=router7
      - PORT=9000
  
  # New router 8: connected to routers 6, 7, and 10
  router8:
    build:
      context: ./router
      dockerfile: Dockerfile
    container_name: router8
    networks:
      link-6-8:
        ipv4_address: 192.168.68.3
      link-7-8:
        ipv4_address: 192.168.78.3
      link-8-9:
        ipv4_address: 192.168.89.2
      link-8-10:
        ipv4_address: 192.168.110.2
      management:
        ipv4_address: 10.0.0.17
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.ip_forward=1
    ports:
      - "8008:8000"
      - "9008:9000"
    volumes:
      - ./shared:/shared
    environment:
      - ROUTER_ID=router8
      - PORT=9000
  
  # New router 9: connected to routers 6, 7, 8, and 10
  router9:
    build:
      context: ./router
      dockerfile: Dockerfile
    container_name: router9
    networks:
      link-6-9:
        ipv4_address: 192.168.69.3
      link-7-9:
        ipv4_address: 192.168.79.3
      link-8-9:
        ipv4_address: 192.168.89.3
      link-9-10:
        ipv4_address: 192.168.120.2
      management:
        ipv4_address: 10.0.0.18
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.ip_forward=1
    ports:
      - "8009:8000"
      - "9009:9000"
    volumes:
      - ./shared:/shared
    environment:
      - ROUTER_ID=router9
      - PORT=9000
  
  # New router 10: connected to routers 8 and 9
  router10:
    build:
      context: ./router
      dockerfile: Dockerfile
    container_name: router10
    networks:
      link-8-10:
        ipv4_address: 192.168.110.3
      link-9-10:
        ipv4_address: 192.168.120.3
      management:
        ipv4_address: 10.0.0.19
    cap_add:
      - NET_ADMIN
    sysctls:
      - net.ipv4.ip_forward=1
    ports:
      - "8010:8000"
      - "9010:9000"
    volumes:
      - ./shared:/shared
    environment:
      - ROUTER_ID=router10
      - PORT=9000